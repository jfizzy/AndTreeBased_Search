

This is the flow so far:


Manager is the overall coordinator for the program - has main()
	--> creates and runs an InputManager (parses input file)
	--> creates a Schedule (handles schedule and search data)
	--> creates and runs a SearchManager (performs the search)

InputManager uses FileExaminer and InputWrapper to parse the input file
	--> data is put into a Schedule - has all the info needed for a search
	--> noncompatibles (and pairs, preferences, etc) are added to each Meeting (Lecture/NonLecture)

SearchManager works on a Schedule object
	--> runs the and-tree based search using data in the Schedule
	--> fills in the list of Assignments (Meeting/Slot)

    Currently:  - fill in the timetable randomly, multiple tries to get valid assignments
                - print assignments, eval breakdown, any violated hard constraints
                
    See SearchManager.java for a breakdown of what we need to implement still



Constr works on a Schedule object
	--> checks if hard constraints are satisfied
	--> see Constr.java for comments on how to use

Eval works on a Schedule object
	--> checks how well soft constraints are satisfied
	--> see Eval.java for comments on how to use

    



Schedule has:
	- lecture slots list
	- nonlecture slots list
	- course list
	- lectures list
	- nonlectures list
	- assignments list

LectureSlots are Slots
NonLectureSlots are Slots
	- have start and end times, min and max values
	- can be active or inactive (if they are not mentioned in input)

Courses
	- have Sections, which have Lectures/Labs/Tutorials
	- these are used to produce the Lecture list

Lectures are Meetings
Labs are NonLectures, which are Meetings
Tutorials are NonLectures, which are Meetings
	- have department, course number, section number
	- have noncompatible, unwanted, pair, partassign, preference lists

Assignments
	- have a Meeting and a Slot









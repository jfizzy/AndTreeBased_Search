
This is the flow so far:


Manager is the overall coordinator for the program
--> creates and runs an InputManager (parse input)
--> creates a ScheduleManager (contains schedule and search data)
--> creates and runs a SearchManager (manage search)

InputManager uses FileExaminer and InputWrapper to parse the input file
--> data put into SearchData object - contains all the info needed for a search
--> special input (e.g. noncompatible, pair) is added to each Meeting (Lecture/NonLecture)

SearchManager works on a ScheduleManager object
--> run the and-tree based search
--> fills in the timetable with Assignments (Meeting/Slot)

    Currently:  - generate random special input (noncompatible, etc.)
                - fill the timetable randomly
                - print timetable and eval breakdown

Constr works on a ScheduleManager object
--> check() method returns true if hard constraints are met

Eval works on a ScheduleManager object
--> getEval() method for evaluating soft constraints



ScheduleManager contains:
- lecture slots list
- nonlecture slots list
- course list
- lectures list
- nonlectures list
- timetable object (contains the current schedule)

LectureSlots are Slots
NonLectureSlots are Slots
- have start and end times, min and max values

Courses
- contain Sections, which have Lectures/Labs/Tutorials

Lectures are Meetings
Labs are NonLectures, which are Meetings
Tutorials are NonLectures, which are Meetings
- have department, course number, section number
- have noncompatible, unwanted, pair, partassign, preference lists

TimeTable
- contains a list of Assignments, which have a Meeting and a Slot

